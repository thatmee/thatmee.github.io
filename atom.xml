<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>thatmee&#39;s blog</title>
  
  <subtitle>Stay hungry, stay foolish.</subtitle>
  <link href="http://thatmee.github.io/atom.xml" rel="self"/>
  
  <link href="http://thatmee.github.io/"/>
  <updated>2021-04-26T17:26:57.516Z</updated>
  <id>http://thatmee.github.io/</id>
  
  <author>
    <name>thatmee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++程序设计08——运算符重载</title>
    <link href="http://thatmee.github.io/2021/04/27/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A108%E2%80%94%E2%80%94%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <id>http://thatmee.github.io/2021/04/27/C++%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A108%E2%80%94%E2%80%94%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</id>
    <published>2021-04-26T16:32:23.000Z</published>
    <updated>2021-04-26T17:26:57.516Z</updated>
    
    <content type="html"><![CDATA[<p>C++程序设计（崔毅东）MOOC 学习笔记08——运算符重载</p><p>目录：</p><ol><li>引入：平面向量类 2D Vector Class</li><li>重载运算符基本介绍</li><li>重载实例</li></ol><span id="more"></span><h1 id="引入：平面向量类-2D-Vector-Class"><a href="#引入：平面向量类-2D-Vector-Class" class="headerlink" title="引入：平面向量类 2D Vector Class"></a>引入：平面向量类 2D Vector Class</h1><h2 id="在C-中描述平面向量"><a href="#在C-中描述平面向量" class="headerlink" title="在C++中描述平面向量"></a>在C++中描述平面向量</h2><ol><li><p>C++ STL vector: 变长数组</p></li><li><p>向量数据成员：</p><p> <em>double x, double y</em></p><p> <em>或者 std::array&lt;double, 2&gt; v_;</em></p></li><li><p>运算</p><p> a. 数乘、点积</p><p> b. 求长度和方向</p><p> ​     <em>| (1, 2)| : √ ( 11 + 22)</em></p><p> ​     <em>dir (1, 2) : arctan ( 1/2 )</em></p></li><li><p>==, !=, &lt;, &lt;=, &gt;, &gt;=</p></li><li><p>类型转换：</p><ol><li>转为double，即求向量长度；</li><li>转为string</li></ol></li><li><p>负值</p></li><li><p>自加1，自减1</p></li></ol><h2 id="TDD开发设计方法"><a href="#TDD开发设计方法" class="headerlink" title="TDD开发设计方法"></a>TDD开发设计方法</h2><ol><li><p>Test-Driven Development (TDD),测试驱动开发</p><blockquote><p>一种开发设计方法，值得一看。Kent Beck 《测试驱动开发》</p></blockquote></li><li><p>步骤</p><p> (1)   先编写测试代码，而不是功能代码</p><p> (2)   编译运行测试代码，发现不能通过</p><p> (3)   做一些小小的改动（编写功能代码），尽快地让测试程序可运行</p><p> (4)   重构代码，优化设计</p></li></ol><h2 id="Vector-2D-类成员函数"><a href="#Vector-2D-类成员函数" class="headerlink" title="Vector 2D 类成员函数"></a>Vector 2D 类成员函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">atan</span><span class="params">(<span class="keyword">double</span> x)</span></span>; <span class="comment">//返回x的反正切值，以弧度为单位。有其他类型重载</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">double</span> x)</span></span>; <span class="comment">//返回x的平方根。有其它类型重载</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">pow</span> <span class="params">(<span class="keyword">double</span> b, <span class="keyword">double</span> exp)</span></span>; <span class="comment">// 返回b的exp次方。有其它类型重载</span></span><br></pre></td></tr></table></figure><h1 id="重载运算符基本介绍"><a href="#重载运算符基本介绍" class="headerlink" title="重载运算符基本介绍"></a>重载运算符基本介绍</h1><h2 id="运算符与函数的异同"><a href="#运算符与函数的异同" class="headerlink" title="运算符与函数的异同"></a>运算符与函数的异同</h2><ol><li><p>运算符可以看做是函数</p></li><li><p>不同之处</p><p> （1） 语法有区别</p><p> （2） 不能自定义新的运算符，只能重载已经存在的运算符</p><p> （3） <strong>函数可overload, override产生任何想要的结果，但运算符作用于内置类型的行为不能修改</strong></p></li><li><p>函数式编程语言的观念——一切皆是函数【Haskell】</p></li><li><p>Emacs calculator软件</p></li></ol><h2 id="C-运算符函数"><a href="#C-运算符函数" class="headerlink" title="C++运算符函数"></a>C++运算符函数</h2><h3 id="可重载的运算符"><a href="#可重载的运算符" class="headerlink" title="可重载的运算符"></a>可重载的运算符</h3><ol><li><p>类型转换运算符：double, int, char, ……</p></li><li><p>new/delete, new []/delete[]</p></li><li><p>“”_suffix 用户自定义字面量运算符(自C++11起)</p></li><li><p>一般运算符:</p> <img src="https://edu-image.nosdn.127.net/78204981D300A14672499590A0C34580.jpg?imageView&thumbnail=890x0&quality=100" alt="img" style="zoom:50%;" /></li></ol><h3 id="不可重载的运算符"><a href="#不可重载的运算符" class="headerlink" title="不可重载的运算符"></a>不可重载的运算符</h3><table><thead><tr><th>Operator</th><th align="left">Name</th></tr></thead><tbody><tr><td>.</td><td align="left">类属关系运算符</td></tr><tr><td>.*</td><td align="left">成员指针运算符</td></tr><tr><td>::</td><td align="left">作用域运算符</td></tr><tr><td>?:</td><td align="left">条件运算符</td></tr><tr><td>#</td><td align="left">预编译符号</td></tr></tbody></table><h3 id="运算符重载的限制"><a href="#运算符重载的限制" class="headerlink" title="运算符重载的限制"></a>运算符重载的限制</h3><ol><li>优先级和结合性不变</li><li>不可创造新的运算符</li></ol><h3 id="运算符函数"><a href="#运算符函数" class="headerlink" title="运算符函数"></a>运算符函数</h3><p><img src="https://edu-image.nosdn.127.net/26D6D0D7CCEA9856BC70B29511F82886.jpg?imageView&thumbnail=890x0&quality=100" alt="img"></p><p>【<strong>注意</strong>】</p><ol><li>v2作为<strong>参数</strong>传递给v1的operator函数</li><li>this指针的几个要点（见上图），调用v1 &lt; v2 时，this指向v1</li><li>传参的时候可以不用引用吗——可以</li><li>使用引用的好处——提高调用效率，不需要调用拷贝构造函数！</li></ol><h3 id="确定运算符的调用形式"><a href="#确定运算符的调用形式" class="headerlink" title="确定运算符的调用形式"></a>确定运算符的调用形式</h3><p><img src="/images/image-20210426215559462.png" alt="image-20210426215559462"></p><h2 id="左值、纯右值与将亡值"><a href="#左值、纯右值与将亡值" class="headerlink" title="左值、纯右值与将亡值"></a>左值、纯右值与将亡值</h2><h3 id="C-03-的左值和右值"><a href="#C-03-的左值和右值" class="headerlink" title="C++03 的左值和右值"></a>C++03 的左值和右值</h3><p>(1)   能放在等号左边的是lvalue</p><p>(2)   只能放在等号右边的是rvalue</p><p>(3)   lvalue可以作为rvalue使用</p><h3 id="C-11-的左值和右值"><a href="#C-11-的左值和右值" class="headerlink" title="C++11 的左值和右值"></a>C++11 的左值和右值</h3><ol><li><p><strong>左值</strong></p><ul><li><p>指定了一个函数或者对象，它是一个可以取地址的表达式</p></li><li><p>举例：</p></li></ul><p> ​    (1)   解引用表达式*p：&amp;(*p)</p><p> ​    (2)   字符串字面量”abc”：字符串存储在静态区，是有地址的，首地址是一个指针。</p><p> ​    (3)   <strong>前置</strong>自增/自减表达式 ++i / –i：前置表达式操作过程是先对i进行自增自减运算，再取地址，&amp;(++i)等价于&amp;i。后置自增/自减表达式不能进行取地址操作</p><p> ​    (4)   赋值或复合运算符表达式(x=y或m*=n等）</p></li><li><p><strong>纯右值</strong></p><ul><li><p>纯右值：不和对象相关联的值(字面量)，或者其求值结果是字面量或者一个匿名的临时对象</p></li><li><p>举例：</p><p>  (1)   除字符串字面量以外的字面量，比如 32, ‘a’</p><p>  (2)   返回非引用类型的函数调用 int f() { return 1;}</p><p>  (3)   后置自增/自减表达式 i++/i–</p><p>  (4)   算术/逻辑/关系表达式（a+b、a&amp;b、a&lt;&lt;b）（a&amp;&amp;b、a||b、~a）（a==b、a&gt;=b、a&lt;b）</p><p>  (5)   取地址（&amp;x）</p></li></ul></li><li><p><strong>左值可以当成右值使用</strong></p></li></ol><h3 id="C-11-将亡值"><a href="#C-11-将亡值" class="headerlink" title="C++11 将亡值"></a>C++11 将亡值</h3><ol><li><p>将亡值：将亡值也指定了一个对象，是一个将纯右值转换为<strong>右值引用</strong>的表达式</p><ul><li>右值引用：int**&amp;&amp;** rvr1{ 22 };</li><li>举例：</li></ul> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> <span class="number">6</span> * x; &#125; <span class="comment">// pure rvalue </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">int</span>&amp; lvr5&#123; <span class="number">21</span> &#125;; <span class="comment">// 常量左值引用可引用纯右值</span></span><br><span class="line">      <span class="keyword">int</span>&amp; lvr6&#123; <span class="number">22</span> &#125;; <span class="comment">// 错！非常量左值引用不可引用纯右值</span></span><br><span class="line">      <span class="keyword">int</span>&amp;&amp; rvr1&#123; <span class="number">22</span> &#125;; <span class="comment">// 右值引用可以引用纯右值</span></span><br><span class="line">      <span class="keyword">int</span>&amp; lvr7&#123; <span class="built_in">prv</span>(<span class="number">2</span>) &#125;; <span class="comment">// 错！非常量左值引用不可引用纯右值</span></span><br><span class="line">      <span class="keyword">int</span>&amp;&amp; rvr2&#123; <span class="built_in">prv</span>(<span class="number">2</span>) &#125;; <span class="comment">// 右值引用普通函数返回值</span></span><br><span class="line">      rvr1 = ++rvr2; <span class="comment">// 右值引用做左值使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 右值引用可以看作延续了纯右值的生命期，比如line7，原本执行完prv(2)之后返回值就找不到了，使用右值引用就可以继续对返回值进行修改，比如line8。</p></li></ol><h1 id="重载实例"><a href="#重载实例" class="headerlink" title="重载实例"></a>重载实例</h1><h2 id="重载一般二元算术运算符"><a href="#重载一般二元算术运算符" class="headerlink" title="重载一般二元算术运算符"></a>重载一般二元算术运算符</h2><h3 id="调用一般二元运算符"><a href="#调用一般二元运算符" class="headerlink" title="调用一般二元运算符"></a>调用一般二元运算符</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vec2D a&#123;<span class="number">1</span>,<span class="number">2</span>&#125;, b&#123;<span class="number">3</span>, <span class="number">6</span>&#125;; <span class="keyword">double</span> z &#123;<span class="number">1.3</span>&#125;;</span><br><span class="line">Vec2D c = a + b;  <span class="comment">// a.operator+(b); à Vec2D Vec2D::operator+(Vec2D);</span></span><br><span class="line">Vec2D d = a + z;  <span class="comment">// a.operator+(z); à Vec2D Vec2D::operator+(double);</span></span><br><span class="line">Vec2D e = z + b;  <span class="comment">// z.operator+(b); à Vec2D double::operator+(Vec2D);错误！</span></span><br></pre></td></tr></table></figure><p>【注意】最后一行错误原因：double 类型是内建类型，其运算符不能被重载</p><h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vec2D</span> &#123;</span></span><br><span class="line">  Vec2D <span class="keyword">operator</span> +(Vec2D);                <span class="comment">//成员函数</span></span><br><span class="line">  Vec2D <span class="keyword">operator</span> +(<span class="keyword">double</span>);               <span class="comment">//成员函数</span></span><br><span class="line">  <span class="keyword">friend</span> Vec2D <span class="keyword">operator</span> +(<span class="keyword">double</span>, Vec2D); <span class="comment">//非成员函数，友元函数    </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Vec2D <span class="keyword">operator</span> +(<span class="keyword">double</span>, Vec2D) &#123; <span class="comment">// Do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【注意】友元函数需要两个参数，不能像成员函数一样默认本对象为调用者</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Vec2D <span class="title">v1</span><span class="params">(<span class="number">2</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">Vec2D v2 = v1 + <span class="built_in">Vec2D</span>(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1 is &quot;</span> &lt;&lt; v1.<span class="built_in">toString</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v2 is &quot;</span> &lt;&lt; v2.<span class="built_in">toString</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="重载复合二元算术运算符（-and-）"><a href="#重载复合二元算术运算符（-and-）" class="headerlink" title="重载复合二元算术运算符（+=, -=, *=, and /=）"></a>重载复合二元算术运算符（+=, -=, *=, and /=）</h2><h3 id="复合运算符操作的特殊之处"><a href="#复合运算符操作的特殊之处" class="headerlink" title="复合运算符操作的特殊之处"></a>复合运算符操作的特殊之处</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1 += v2; <span class="comment">// 语句执行后，v1的值被改变了（这非常重要！！）</span></span><br><span class="line">v1 = v1 + v2;</span><br></pre></td></tr></table></figure><h3 id="复合运算符的重载"><a href="#复合运算符的重载" class="headerlink" title="复合运算符的重载"></a>复合运算符的重载</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vec2D Vec2D::<span class="keyword">operator</span> +=(<span class="keyword">const</span> Vec2D&amp; secondVec2D ) &#123;</span><br><span class="line">    *<span class="keyword">this</span> = <span class="keyword">this</span>-&gt;<span class="built_in">add</span>(secondVec2D); <span class="comment">//add函数返回临时的匿名对象，这个对象被赋给this指针</span></span><br><span class="line"> <span class="keyword">return</span> (*<span class="keyword">this</span>); <span class="comment">//返回解引用的this指针，也就是返回了this指向的对象</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function">Vec2D <span class="title">Vec2D::add</span><span class="params">(<span class="keyword">const</span> Vec2D&amp; secondVec2D)</span> </span>&#123; <span class="comment">//prvalue</span></span><br><span class="line"> <span class="keyword">double</span> m = x_ + secondVec2D.<span class="built_in">getX</span>()</span><br><span class="line"> <span class="keyword">double</span> n = y_ + secondVec2D.y_;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">Vec2D</span>(m, n); <span class="comment">//返回临时的匿名对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果将以上代码对应v1+=v2; 则有：</p><ul><li>secondVec2D 是 v2</li><li>(*this) 是改变后的 v1</li></ul></li><li><p>如果将</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*<span class="keyword">this</span> = <span class="keyword">this</span>-&gt;<span class="built_in">add</span>(secondVec2D);</span><br><span class="line"><span class="keyword">return</span> (*<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>  修改为：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;<span class="built_in">add</span>(secondVec2D);</span><br></pre></td></tr></table></figure><p>  这个重载是否还有效？</p></li></ul><h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Vec2D <span class="title">v2</span><span class="params">(<span class="number">2</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">v2 += <span class="built_in">Vec2D</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v2 is &quot;</span> &lt;&lt; v2.<span class="built_in">toString</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="重载数组下标运算符"><a href="#重载数组下标运算符" class="headerlink" title="重载数组下标运算符"></a>重载数组下标运算符</h2><h3 id="重载-运算符"><a href="#重载-运算符" class="headerlink" title="重载[]运算符"></a>重载[]运算符</h3><ul><li><p>为什么重载[]运算符</p></li><li><p>[]重载后可用类似数组的语法格式访问对象内容</p></li><li><p>重载代码示例</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Vec2D v &#123;<span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v.x_: &quot;</span> &lt;&lt; v[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;v.y_: &quot;</span> &lt;&lt; v[<span class="number">1</span>] &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Vec2D::<span class="keyword">operator</span>[](<span class="keyword">const</span> <span class="keyword">int</span> &amp;index) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x_;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> y_;</span><br><span class="line">    &#125;      </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;index out of bound&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这种重载方法只能读取数据*/</span></span><br></pre></td></tr></table></figure><h3 id="数组下标运算符作为访问器和修改器"><a href="#数组下标运算符作为访问器和修改器" class="headerlink" title="数组下标运算符作为访问器和修改器"></a>数组下标运算符作为访问器和修改器</h3></li></ul><ol><li><p>访问器和修改器：作为访问器就是用[]运算符读取数据，修改器就是用[]运算符修改数据</p></li><li><p>使r2[]成为左值的方法：使[]返回一个引用</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span>&amp; Vec2D::<span class="keyword">operator</span>[](<span class="keyword">const</span> <span class="keyword">int</span> &amp;index) &#123; <span class="comment">//lvalue</span></span><br><span class="line">  <span class="keyword">if</span> (index == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> x_;  <span class="comment">//x_ can be modified</span></span><br><span class="line">      <span class="comment">//...... Now, the Vec2D class is mutable.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>​    </p><h2 id="重载一元运算符"><a href="#重载一元运算符" class="headerlink" title="重载一元运算符"></a>重载一元运算符</h2><h3 id="单目运算符"><a href="#单目运算符" class="headerlink" title="单目运算符"></a>单目运算符</h3><ol><li><p>主要的单目运算符：–, ++, -（负号）, *（解引用）</p></li><li><p>编译器执行过程：</p><ul><li><p>若operator @是在obj的类的<strong>成员函数</strong>，则调用obj.operator @()【无参数】</p></li><li><p>若operator @是obj的类的<strong>友元函数</strong>，则调用</p><p>  operator @(obj)</p></li></ul></li></ol><h3 id="重载负号运算符"><a href="#重载负号运算符" class="headerlink" title="重载负号运算符"></a>重载负号运算符</h3><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Vec2D <span class="title">v1</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">Vec2D v2 = -v1;  <span class="comment">// 向量v1求负值；v1的值不变</span></span><br><span class="line">cout &lt;&lt; v1.<span class="built_in">toString</span>();</span><br></pre></td></tr></table></figure><h4 id="重载负号运算符-1"><a href="#重载负号运算符-1" class="headerlink" title="重载负号运算符"></a>重载负号运算符</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vec2D* Vec2D::<span class="keyword">operator</span>-()&#123;</span><br><span class="line">    <span class="keyword">return</span> *Vec2D*(-<span class="keyword">this</span>-&gt;x_**,** **-**<span class="keyword">this</span>-&gt;y_); <span class="comment">// 返回匿名临时对象 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重载-和–运算符"><a href="#重载-和–运算符" class="headerlink" title="重载++和–运算符"></a>重载++和–运算符</h3><h4 id="前置、后置运算符与操作顺序"><a href="#前置、后置运算符与操作顺序" class="headerlink" title="前置、后置运算符与操作顺序"></a>前置、后置运算符与操作顺序</h4><ul><li><p>前置：先增减后取值，表达式是lvalue</p></li><li><p>后置：先取值（存在某个地方）后增减，表达式是prvalue（纯右值）</p><ul><li>举例：<ul><li>b = (a++) / 2 这一算式中，会先把a的值取出来放到某处，假设为temp（temp将被用于参加整个表达式的后续计算），之后a会被+1，a的值被改变。</li><li>b = (++a) / 2 这一算式，则直接将a值+1，并用a进行后续计算，没有temp这一环节。</li></ul></li><li>代码示例：</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Vec2D <span class="title">v1</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1: &quot;</span> &lt;&lt; v1.<span class="built_in">toString</span>() &lt;&lt; endl; <span class="comment">//v1: (3, 4)</span></span><br><span class="line"></span><br><span class="line">Vec2D v2 = ++v1;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v2: &quot;</span> &lt;&lt; v2.<span class="built_in">toString</span>() &lt;&lt; endl; <span class="comment">// v2: (3, 4)</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function">Vec2D <span class="title">v3</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">Vec2D v4 = v3++;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v3: &quot;</span> &lt;&lt; v3.<span class="built_in">toString</span>() &lt;&lt; endl; <span class="comment">// v3: (3, 4)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v4: &quot;</span> &lt;&lt; v4.<span class="built_in">toString</span>() &lt;&lt; endl; <span class="comment">// v4: (2, 3)</span></span><br></pre></td></tr></table></figure><h4 id="前置与后置在函数定义中的区别"><a href="#前置与后置在函数定义中的区别" class="headerlink" title="前置与后置在函数定义中的区别"></a>前置与后置在函数定义中的区别</h4><p><img src="../images/image-20210426233330528.png" alt="image-20210426233330528"></p><ul><li><p>前置++/–重载无参数，返回引用类型</p></li><li><p>后置++/–重载带参数——“dummy”</p><ul><li>这个参数用于表示这是一个后置运算符，实际调用的时候并不会传参</li></ul></li><li><p>若在类外定义，则不论前置后置都需要参数</p></li></ul><h4 id="重载实例-1"><a href="#重载实例-1" class="headerlink" title="重载实例"></a>重载实例</h4><ul><li>前置++运算符</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vec2D&amp; Vec2D::<span class="keyword">operator</span>++()&#123;</span><br><span class="line">    x_ += <span class="number">1</span>;</span><br><span class="line">    y_ += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">//返回对象本身</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>后置++运算符</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vec2D Vec2D::<span class="keyword">operator</span>++(<span class="keyword">int</span> dummy)&#123;</span><br><span class="line">    <span class="function">Vec2D <span class="title">temp</span><span class="params">(<span class="keyword">this</span>-&gt;x_, <span class="keyword">this</span>-&gt;y_)</span></span>;</span><br><span class="line">    x_ += <span class="number">1</span>;</span><br><span class="line">    y_ += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> temp; <span class="comment">//返回的是未自增的对象，是一个纯右值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>两条返回语句的不同</strong>导致了前置++和后置++的区别</li></ul><h2 id="重载流插入-lt-lt-提取-gt-gt-运算符"><a href="#重载流插入-lt-lt-提取-gt-gt-运算符" class="headerlink" title="重载流插入(&lt;&lt;)/提取(&gt;&gt;)运算符"></a>重载流插入(&lt;&lt;)/提取(&gt;&gt;)运算符</h2><h3 id="重载-lt-lt-gt-gt-的目的"><a href="#重载-lt-lt-gt-gt-的目的" class="headerlink" title="重载&lt;&lt;/&gt;&gt;的目的"></a>重载&lt;&lt;/&gt;&gt;的目的</h3><p>能够把对象信息直接输出，比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; vec2d;</span><br><span class="line">cin &gt;&gt; vec2d;</span><br></pre></td></tr></table></figure><h3 id="重载为友元函数"><a href="#重载为友元函数" class="headerlink" title="重载为友元函数"></a>重载为友元函数</h3><ol><li><p>为什么不能重载为成员函数</p><p> 运算符重载为类成员函数后，当调用该运算符时，左操作数必须是该类的实例。若&lt;&lt;和&gt;&gt;重载为成员函数，则只能用 v1&lt;&lt;cout; 如下所示：</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*重载为成员函数*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vec2D</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;stream);</span><br><span class="line">    istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;stream);</span><br><span class="line">&#125;;</span><br><span class="line">Vec2D v1;</span><br><span class="line">v1 &lt;&lt; cout; <span class="comment">//Vec2D对象只能作为第一个操作数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*重载为友元函数*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vec2D</span> &#123;</span> </span><br><span class="line">  <span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;stream, Vec2D &amp;v);</span><br><span class="line">  <span class="keyword">friend</span> istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;stream, Vec2D &amp;v);</span><br><span class="line">&#125;;</span><br><span class="line">Vec2D v1;</span><br><span class="line">cout &lt;&lt; v1; <span class="comment">//更符合编程习惯</span></span><br></pre></td></tr></table></figure></li><li><p>为什么友元函数的返回值是**ostream&amp;**类型</p><p> 要实现cout&lt;&lt;x&lt;&lt;y; 这类<strong>连续输出</strong>的代码，想要输出y，cout&lt;&lt;x这一部分应该返回一个ostream类型，所以使用ostream&amp;作为返回值</p><blockquote><p>返回ostream类型与&amp;有什么联系？为什么一定是&amp;呢</p></blockquote></li></ol><h2 id="重载对象转换运算符"><a href="#重载对象转换运算符" class="headerlink" title="重载对象转换运算符"></a>重载对象转换运算符</h2><h3 id="重载目的"><a href="#重载目的" class="headerlink" title="重载目的"></a>重载目的</h3><ul><li>将Vec2D对象转换为double数时，我们可以求该对象的范数，也就是向量长度</li></ul><h3 id="重载实例-2"><a href="#重载实例-2" class="headerlink" title="重载实例"></a>重载实例</h3><ul><li>类型转换函数：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Vec2D::<span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span> </span>&#123; <span class="comment">//操作符名称和要转到的类型同名，类似于构造函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">magnitude</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用实例：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Vec2D <span class="title">v1</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="keyword">double</span> d = v1 + <span class="number">5.1</span>; <span class="comment">// d: 10.1</span></span><br><span class="line"><span class="keyword">double</span> e = <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(v1);  <span class="comment">// e: 5.0</span></span><br></pre></td></tr></table></figure><h2 id="重载赋值运算符"><a href="#重载赋值运算符" class="headerlink" title="重载赋值运算符"></a>重载赋值运算符</h2><p><a href="https://www.icourse163.org/learn/BUPT-1003564002?tid=1461043448#/learn/content?type=detail&id=1237770721&cid=1257884782">C++程序设计（面向对象进阶）_中国大学MOOC(慕课) (icourse163.org)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;C++程序设计（崔毅东）MOOC 学习笔记08——运算符重载&lt;/p&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;引入：平面向量类 2D Vector Class&lt;/li&gt;
&lt;li&gt;重载运算符基本介绍&lt;/li&gt;
&lt;li&gt;重载实例&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="专业" scheme="http://thatmee.github.io/categories/%E4%B8%93%E4%B8%9A/"/>
    
    <category term="语言学习" scheme="http://thatmee.github.io/categories/%E4%B8%93%E4%B8%9A/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="C++" scheme="http://thatmee.github.io/categories/%E4%B8%93%E4%B8%9A/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/C/"/>
    
    
    <category term="C++" scheme="http://thatmee.github.io/tags/C/"/>
    
  </entry>
  
</feed>
