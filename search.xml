<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第一次尝试</title>
      <link href="2021/04/25/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95/"/>
      <url>2021/04/25/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="CQ"><a href="#CQ" class="headerlink" title="CQ"></a>CQ</h1><p>This document describes how the Chromium Commit Queue (CQ) is structured and<br>managed. This is specific for the Chromium CQ. Questions about other CQs should<br>be directed to <a href="mailto:&#105;&#x6e;&#102;&#114;&#x61;&#45;&#x64;&#101;&#118;&#64;&#99;&#104;&#114;&#x6f;&#x6d;&#x69;&#x75;&#109;&#x2e;&#x6f;&#114;&#x67;">&#105;&#x6e;&#102;&#114;&#x61;&#45;&#x64;&#101;&#118;&#64;&#99;&#104;&#114;&#x6f;&#x6d;&#x69;&#x75;&#109;&#x2e;&#x6f;&#114;&#x67;</a>.</p><span id="more"></span><p>[TOC]</p><h2 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h2><p>The Chromium CQ exists to test developer changes before they land into<br><a href="https://chromium.googlesource.com/chromium/src/">chromium/src</a>. It runs all the<br>test suites which a given CL affects, and ensures that they all pass.</p><h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><ul><li><p><code>COMMIT=false</code></p><p>You can mark a CL with this if you are working on experimental code and do not<br>want to risk accidentally submitting it via the CQ. The CQ will immediately<br>stop processing the change if it contains this option.</p></li><li><p><code>CQ_INCLUDE_TRYBOTS=&lt;trybots&gt;</code></p><p>This flag allows you to specify some additional bots to run for this CL, in<br>addition to the default bots. The format for the list of trybots is<br>“bucket:trybot1,trybot2;bucket2:trybot3”.</p></li><li><p><code>NOPRESUBMIT=true</code></p><p>If you want to skip the presubmit check, you can add this line, and the commit<br>queue won’t run the presubmit for your change. This should only be used when<br>there’s a bug in the PRESUBMIT scripts. Please check that there’s a bug filed<br>against the bad script, and if there isn’t, <a href="https://crbug.com/new">file one</a>.</p></li><li><p><code>NOTREECHECKS=true</code></p><p>Add this line if you want to skip the tree status checks. This means the CQ<br>will commit a CL even if the tree is closed. Obviously this is strongly<br>discouraged, since the tree is usually closed for a reason. However, in rare<br>cases this is acceptable, primarily to fix build breakages (i.e., your CL will<br>help in reopening the tree).</p></li><li><p><code>NOTRY=true</code></p><p>This should only be used for reverts to green the tree, since it skips try<br>bots and might therefore break the tree. You shouldn’t use this otherwise.</p></li><li><p><code>TBR=&lt;username&gt;</code></p><p><a href="https://chromium.googlesource.com/chromium/src/+/master/docs/code_reviews.md#TBR-To-Be-Reviewed">See policy</a><br>of when it’s acceptable to use TBR (“To be reviewed”). If a change has a TBR<br>line with a valid reviewer, the CQ will skip checks for LGTMs.</p></li></ul><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="What-exactly-does-the-CQ-run"><a href="#What-exactly-does-the-CQ-run" class="headerlink" title="What exactly does the CQ run?"></a>What exactly does the CQ run?</h3><p>CQ runs the jobs specified in <a href="../../infra/config/branch/cq.cfg">cq.cfg</a>. See<br><a href="cq_builders.md"><code>cq_builders.md</code></a> for an auto generated file with links to<br>information about the builders on the CQ.</p><p>Some of these jobs are experimental. This means they are executed on a<br>percentage of CQ builds, and the outcome of the build doesn’t affect if the CL<br>can land or not. See the schema linked at the top of the file for more<br>information on what the fields in the config do.</p><p>The CQ has the following structure:</p><ul><li>Compile all test suites that might be affected by the CL.</li><li>Runs all test suites that might be affected by the CL.<ul><li>Many test suites are divided into shards. Each shard is run as a separate<br>swarming task.</li><li>These steps are labeled ‘(with patch)’</li></ul></li><li>Retry each shard that has a test failure. The retry has the exact same<br>configuration as the original run. No recompile is necessary.<ul><li>If the retry succeeds, then the failure is ignored.</li><li>These steps are labeled ‘(retry shards with patch)’</li><li>It’s important to retry with the exact same configuration. Attempting to<br>retry the failing test in isolation often produces different behavior.</li></ul></li><li>Recompile each failing test suite without the CL. Rerun each failing test<br>suite in isolation.<ul><li>If the retry fails, then the fail is ignored, as it’s assumed that the test<br>is broken/flaky on tip of tree.</li><li>These steps are labeled ‘(without patch)’</li></ul></li><li>Fail the build if there are tests which failed in both ‘(with patch)’ and<br>‘(retry shards with patch)’ but passed in ‘(without patch)’.</li></ul><h3 id="Why-did-my-CL-fail-the-CQ"><a href="#Why-did-my-CL-fail-the-CQ" class="headerlink" title="Why did my CL fail the CQ?"></a>Why did my CL fail the CQ?</h3><p>Please follow these general guidelines:</p><ol><li>Check to see if your patch caused the build failures, and fix if possible.</li><li>If compilation or individual tests are failing on one or more CQ bots and you<br>suspect that your CL is not responsible, please contact your friendly<br>neighborhood sheriff by filing a<br><a href="https://bugs.chromium.org/p/chromium/issues/entry?template=Defect%20report%20from%20developer&labels=Sheriff-Chromium&summary=%5BBrief%20description%20of%20problem%5D&comment=What%27s%20wrong?">sheriff bug</a>.<br>If the code in question has appropriate OWNERS, consider contacting or CCing<br>them.</li><li>If other parts of CQ bot execution (e.g. <code>bot_update</code>) are failing, or you<br>have reason to believe the CQ itself is broken, or you can’t really<br>tell what’s wrong, please file a <a href="https://g.co/bugatrooper">trooper bug</a>.</li></ol><p>In both cases, when filing bugs, please include links to the build and/or CL<br>(including relevant patchset information) in question.</p><h3 id="How-do-I-add-a-new-builder-to-the-CQ"><a href="#How-do-I-add-a-new-builder-to-the-CQ" class="headerlink" title="How do I add a new builder to the CQ?"></a>How do I add a new builder to the CQ?</h3><p>There are several requirements for a builder to be added to the Commit Queue.</p><ul><li>All the code for this configuration must be in Chromium’s public repository or<br>brought in through <a href="../../DEPS">src/DEPS</a>.</li><li>Setting up the build should be straightforward for a Chromium developer<br>familiar with existing configurations.</li><li>Tests should use existing test harnesses i.e.<br><a href="../../third_party/googletest">gtest</a>.</li><li>It should be possible for any committer to replicate any testing run; i.e.<br>tests and their data must be in the public repository.</li><li>Median cycle time needs to be under 40 minutes for trybots. 90th percentile<br>should be around an hour (preferrably shorter).</li><li>Configurations need to catch enough failures to be worth adding to the CQ.<br>Running builds on every CL requires a significant amount of compute resources.<br>If a configuration only fails once every couple of weeks on the waterfalls,<br>then it’s probably not worth adding it to the commit queue.</li></ul><p>Please email <a href="mailto:&#100;&#112;&#114;&#97;&#110;&#x6b;&#x65;&#x40;&#x63;&#104;&#114;&#x6f;&#109;&#105;&#117;&#109;&#x2e;&#x6f;&#x72;&#103;">&#100;&#112;&#114;&#97;&#110;&#x6b;&#x65;&#x40;&#x63;&#104;&#114;&#x6f;&#109;&#105;&#117;&#109;&#x2e;&#x6f;&#x72;&#103;</a>, who will approve new build configurations.</p><h2 id="Flakiness"><a href="#Flakiness" class="headerlink" title="Flakiness"></a>Flakiness</h2><p>The CQ can sometimes be flaky. Flakiness is when a test on the CQ fails, but<br>should have passed (commonly known as a false negative). There are a few common<br>causes of flaky tests on the CQ:</p><ul><li>Machine issues; weird system processes running, running out of disk space,<br>etc…</li><li>Test issues; individual tests not being independent and relying on the order<br>of tests being run, not mocking out network traffic or other real world<br>interactions.</li></ul><p>The CQ mitigates flakiness by retrying failed tests. The core tradeoff in retry<br>policy is that adding retries increases the probability that a flaky test will<br>land on tip of tree sublinearly, but mitigates the impact of the flaky test on<br>unrelated CLs exponentially.</p><p>For example, imagine a CL that adds a test that fails with 50% probability. Even<br>with no retries, the test will land with 50% probability. Subsequently, 50% of<br>all unrelated CQ attempts would flakily fail. This effect is cumulative across<br>different flaky tests. Since the CQ has roughly ~20,000 unique flaky tests,<br>without retries, pretty much no CL would ever pass the CQ.</p><h2 id="Help"><a href="#Help" class="headerlink" title="Help!"></a>Help!</h2><p>Have other questions? Run into any issues with the CQ? Email<br><a href="mailto:&#105;&#110;&#x66;&#114;&#x61;&#x2d;&#x64;&#101;&#x76;&#64;&#99;&#104;&#x72;&#111;&#109;&#105;&#x75;&#109;&#x2e;&#111;&#x72;&#x67;">&#105;&#110;&#x66;&#114;&#x61;&#x2d;&#x64;&#101;&#x76;&#64;&#99;&#104;&#x72;&#111;&#109;&#105;&#x75;&#109;&#x2e;&#111;&#x72;&#x67;</a>, or file a <a href="https://g.co/bugatrooper">trooper bug</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> test </category>
          
          <category> Exploration </category>
          
          <category> 瞎玩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
            <tag> tag 2 </tag>
            
            <tag> Hexo </tag>
            
            <tag> tag 3 </tag>
            
            <tag> tag 4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My New Post</title>
      <link href="2021/04/24/My-New-Post/"/>
      <url>2021/04/24/My-New-Post/</url>
      
        <content type="html"><![CDATA[<p> This is a test of post.</p><span id="more"></span><h1 id="Title-1"><a href="#Title-1" class="headerlink" title="Title 1"></a>Title 1</h1><h2 id="Title-2"><a href="#Title-2" class="headerlink" title="Title 2"></a>Title 2</h2><h3 id="Title-3"><a href="#Title-3" class="headerlink" title="Title 3"></a>Title 3</h3><p>正文，江湖救急军军军</p><p><img src="../images/%E6%98%9F%E6%B2%B3.jpg"></p><p>最后，blha</p><p>over</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> test </category>
          
          <category> test2-deeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
            <tag> tag 1 </tag>
            
            <tag> tag 2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/24/hello-world/"/>
      <url>2021/04/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
